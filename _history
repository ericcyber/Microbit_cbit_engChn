{"entries":[{"timestamp":1746526934266,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[0,"play"],[-1,"显示类"],[0," {\r\n"]],"start1":147,"start2":147,"length1":11,"length2":8}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"d\"\n    ]"],[1,",\n    \"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":217,"start2":217,"length1":11,"length2":42}]}]},{"timestamp":1746530258021,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"md\"\n"],[-1,"    ],\n    \"testFiles\": [\n        \"test.ts\"\n"],[0,"    "]],"start1":216,"start2":216,"length1":52,"length2":8}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1746526934265,"editorVersion":"7.0.61","text":{"main.blocks":"","main.ts":"/*\r\nR\r\nmodified from liusen\r\nload dependency\r\n\"cbit\": \"file:../pxt-cbit\"\r\n*/\r\n\r\n\r\n\r\n//% color=\"#C814B8\" weight=25 icon=\"\\uf1d4\"\r\nnamespace cbit_Display {\r\n    \r\n    export enum enColor {\r\n\r\n        //% blockId=\"OFF\" block=\"Off灭\"\r\n        OFF = 0,\r\n        //% blockId=\"Red\" block=\"Red红色\"\r\n        Red,\r\n        //% blockId=\"Green\" block=\"Green绿色\"\r\n        Green,\r\n        //% blockId=\"Blue\" block=\"Blue蓝色\"\r\n        Blue,\r\n        //% blockId=\"White\" block=\"White白色\"\r\n        White,\r\n        //% blockId=\"Cyan\" block=\"Cyan青色\"\r\n        Cyan,\r\n        //% blockId=\"Pinkish\" block=\"Magenta品红\"\r\n        Pinkish,\r\n        //% blockId=\"Green\" block=\"Yellow黄色\"\r\n        Yellow,\r\n\r\n    }\r\n    export enum enLED1 {\r\n        \r\n        //% blockId=\"OFF\" block=\"Off灭\"\r\n        OFF = 0,\r\n        //% blockId=\"ON\" block=\"On亮\"\r\n        ON =1\r\n    }\r\n\r\n    //% blockId=cbit_LED1 block=\"LEDLight灯|Pin引脚 %pin|Status状态 %value\"\r\n    //% weight=5\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=1\r\n    export function LED1(pin: DigitalPin, value: enLED1): void {\r\n\r\n        pins.digitalWritePin(pin, value);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_LED2 block=\"LEDLight灯|Pin引脚 %pin|Brightness亮度 %value\"\r\n    //% weight=4\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% value.min=0 value.max=255\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=2\r\n    export function LED2(pin: AnalogPin, value: number): void {\r\n\r\n        pins.analogWritePin(pin, value * 1024 / 256);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_BreathLED block=\"BreathLight呼吸灯|Pin引脚 %pin\"\r\n    //% weight=3\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=3\r\n    export function BreathLED(pin: AnalogPin): void {\r\n\r\n        for (let i: number = 0; i < 1023; i++) {\r\n            pins.analogWritePin(pin, i);\r\n            //basic.pause(1);\r\n            control.waitMicros(1000);\r\n        }\r\n        basic.pause(10);\r\n        for (let i: number = 1023; i > 0; i--) {\r\n            pins.analogWritePin(pin, i);\r\n            //basic.pause(1);\r\n            control.waitMicros(1000);\r\n        }\r\n\r\n    }\r\n\r\n    //% blockId=cbit_RGB block=\"RGBRainbow七彩灯|Pin引脚R %pin1|Pin引脚G %pin2|Pin引脚B %pin3|Red红色 %value1|Green绿色 %value2|Blue蓝色 %value3\"\r\n    //% weight=2\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB(pin1: AnalogPin, pin2: AnalogPin, pin3: AnalogPin, value1: number, value2: number, value3: number): void {\r\n\r\n        pins.analogWritePin(pin1, value1 * 1024 / 256);\r\n        pins.analogWritePin(pin2, value2 * 1024 / 256);\r\n        pins.analogWritePin(pin3, value3 * 1024 / 256);\r\n\r\n    }\r\n    //% blockId=cbit_RGB2 block=\"RGBRainbow七彩灯|Pin引脚R %pin1|Pin引脚G %pin2|Pin引脚B %pin3|Display显示 %value\"\r\n    //% weight=1\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB2(pin1: DigitalPin, pin2: DigitalPin, pin3: DigitalPin, value: enColor): void {\r\n\r\n        switch (value) {\r\n            case enColor.OFF: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n            case enColor.Red: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n            case enColor.Green: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n            case enColor.Blue: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.White: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.Cyan: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.Pinkish: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.Yellow: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n   \r\n}\r\n/*****************************************************************************************************************************************\r\n *  Sensor传感器类 ***************************************************************************************************************************** \r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#87CEEB\" weight=24 icon=\"\\uf1b6\"\r\nnamespace cbit_Sensor传感器类 {\r\n\r\n    export enum enVoice {\r\n        //% blockId=\"Voice\" block=\"Sound有声音\"\r\n        Voice = 0,\r\n        //% blockId=\"NoVoice\" block=\"Silent无声音\"\r\n        NoVoice = 1\r\n    }\r\n\r\n    export enum enIR {\r\n        //% blockId=\"Get\" block=\"Detected检测到\"\r\n        Get = 0,\r\n        //% blockId=\"NoVoice\" block=\"Undetected未检测\"\r\n        NoGet = 1\r\n    }\r\n    \r\n\r\n    //% blockId=cbit_Voice_Sensor block=\"SoundSensor声音传感器|Pin引脚 %pin|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#87CEEB\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Voice_Sensor(pin: DigitalPin, value: enVoice): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    function IR_send_38k() {\r\n        for (let i: number = 0; i < 8; i++) {\r\n            pins.digitalWritePin(DigitalPin.P9, 1);\r\n            control.waitMicros(13);\r\n            pins.digitalWritePin(DigitalPin.P9, 0);\r\n            control.waitMicros(13);\r\n        }\r\n    }\r\n    //% blockId=cbit_IR_Sensor block=\"InfraredSensor红外传感器|Pin引脚 %pin|  |%value|Obstacle障碍物\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#87CEEB\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function IR_Sensor(pin: DigitalPin, value: enIR): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        //IR_send_38k();\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    //% blockId=cbit_IR_Send block=\"InfraredTransmit红外发射|Pin引脚 %pin\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#87CEEB\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function IR_Send(pin: DigitalPin): void {\r\n\r\n        \r\n        IR_send_38k();\r\n\r\n    }\r\n   \r\n    //% blockId=cbit_ultrasonic block=\"Ultrasound超声波|TransmitPin发射管脚 %Trig|ReceivePin接收管脚 %Echo\"\r\n    //% color=\"#87CEEB\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Ultrasonic(Trig: DigitalPin, Echo: DigitalPin): number {\r\n\r\n        // send pulse\r\n        pins.setPull(Trig, PinPullMode.PullNone);\r\n        pins.digitalWritePin(Trig, 0);\r\n        control.waitMicros(2);\r\n        pins.digitalWritePin(Trig, 1);\r\n        control.waitMicros(10);\r\n        pins.digitalWritePin(Trig, 0);\r\n\r\n        // read pulse\r\n        let d = pins.pulseIn(Echo, PulseValue.High, 23200);\r\n        return d / 58;\r\n    }\r\n}\r\n\r\n/*****************************************************************************************************************************************\r\n *  Input输入类 *****************************************************************************************************************************\r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#808080\" weight=23 icon=\"\\uf11c\"\r\nnamespace cbit_Input输入类 {\r\n\r\n    export enum enRocker {\r\n        //% blockId=\"Nostate\" block=\"无\"\r\n        Nostate = 0,\r\n        //% blockId=\"Up\" block=\"上\"\r\n        Up,\r\n        //% blockId=\"Down\" block=\"下\"\r\n        Down,\r\n        //% blockId=\"Left\" block=\"左\"\r\n        Left,\r\n        //% blockId=\"Right\" block=\"右\"\r\n        Right,\r\n        //% blockId=\"Press\" block=\"按下\"\r\n        Press\r\n    }\r\n\r\n    export enum enTouch {\r\n        //% blockId=\"NoTouch\" block=\"Untouched未触摸\"\r\n        NoTouch = 0,\r\n        //% blockId=\"Touch\" block=\"Touched触摸\"\r\n        Touch = 1\r\n    }\r\n    export enum enButton {\r\n        //% blockId=\"Press\" block=\"Press按下\"\r\n        Press = 0,\r\n        //% blockId=\"Realse\" block=\"Release松开\"\r\n        Realse = 1\r\n    }\r\n\r\n    //% blockId=cbit_TouchPad block=\"TouchSwitch触摸开关|Pin引脚 %pin|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#808080\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\r\n    export function TouchPad(pin: DigitalPin, value: enTouch): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n    //% blockId=cbit_Rocker block=\"Joystick遥杆|VRX %pin1|VRY %pin2|SW %pin3|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#808080\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=6\r\n    export function Rocker(pin1: AnalogPin, pin2: AnalogPin, pin3: AnalogPin, value: enRocker): boolean {\r\n\r\n        //pins.setPull(pin3, PinPullMode.PullUp);\r\n        let x = pins.analogReadPin(pin1);\r\n        let y = pins.analogReadPin(pin2);\r\n        let z = pins.analogReadPin(pin3);\r\n        let now_state = enRocker.Nostate;\r\n\r\n        if (x <= 20) // Up上\r\n        {\r\n\r\n            now_state = enRocker.Up;\r\n\r\n        }\r\n        if (x >= 1000) //\r\n        {\r\n\r\n            now_state = enRocker.Down;\r\n        }\r\n        if (y <= 50) //Right右\r\n        {\r\n            now_state = enRocker.Right;\r\n        }\r\n        if (y >= 1000) //Left左\r\n        {\r\n            now_state = enRocker.Left;\r\n        }\r\n        if (z <= 20)\r\n            now_state = enRocker.Press;\r\n        \r\n        if (now_state == value)\r\n            return true;\r\n        else\r\n            return false;\r\n\r\n    }\r\n\r\n    //% blockId=cbit_Button block=\"PressButton按键|Pin引脚 %pin|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#808080\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\r\n    export function Button(pin: DigitalPin, value: enButton): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }  \r\n}\r\n\r\n/*****************************************************************************************************************************************\r\n *    Music音乐类 *****************************************************************************************************************************\r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#D2691E\" weight=22 icon=\"\\uf001\"\r\nnamespace cbit_Music音乐类 {\r\n    export enum enBuzzer {\r\n\r\n        //% blockId=\"NoBeep\" block=\"Beep响\"\r\n        NoBeep = 0,\r\n        //% blockId=\"Beep\" block=\"NotBeep不响\"\r\n        Beep\r\n    }\r\n\r\n    //% blockId=cbit_Buzzer block=\"ActiveBuzzer有源蜂鸣器|Pin引脚 %pin|值 %value\"\r\n    //% weight=100\r\n    //% blockGap=10 \r\n    //% color=\"#D2691E\"\r\n    //% value.min=0 value.max=1\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=8\r\n    export function Buzzer(pin: DigitalPin, value: enBuzzer): void {\r\n\r\n        pins.setPull(pin, PinPullMode.PullNone);\r\n        pins.digitalWritePin(pin, value);\r\n\r\n    }\r\n\r\n}\r\n\r\n/*****************************************************************************************************************************************\r\n *    Motor电机类 *****************************************************************************************************************************\r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#0000CD\" weight=21 icon=\"\\uf185\"\r\nnamespace cbit_Motor电机类 {\r\n\r\n    //% blockId=cbit_Fan block=\"Fan风扇|Pin引脚 %pin|Speed速度 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#0000CD\"\r\n    //% value.min=0 value.max=1023\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=9\r\n    export function Fan(pin: AnalogPin, value: number): void {\r\n\r\n        pins.analogWritePin(pin, value);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_Servo block=\"Servo舵机|Pin引脚 %pin|Angle角度 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#0000CD\"\r\n    //% value.min=0 value.max=180\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=9\r\n    export function Servo(pin: AnalogPin, value: number): void {\r\n\r\n        pins.servoWritePin(pin, value);\r\n\r\n    }\r\n\r\n}\r\n\r\n//% color=\"#006400\" weight=20 icon=\"\\uf1b9\"\r\nnamespace cbit_Car小车类 {\r\n\r\n    const PCA9685_ADD = 0x41\r\n    const MODE1 = 0x00\r\n    const MODE2 = 0x01\r\n    const SUBADR1 = 0x02\r\n    const SUBADR2 = 0x03\r\n    const SUBADR3 = 0x04\r\n\r\n    const LED0_ON_L = 0x06\r\n    const LED0_ON_H = 0x07\r\n    const LED0_OFF_L = 0x08\r\n    const LED0_OFF_H = 0x09\r\n\r\n    const ALL_LED_ON_L = 0xFA\r\n    const ALL_LED_ON_H = 0xFB\r\n    const ALL_LED_OFF_L = 0xFC\r\n    const ALL_LED_OFF_H = 0xFD\r\n\r\n    const PRESCALE = 0xFE\r\n\r\n    let initialized = false\r\n    let yahStrip: neopixel.Strip;\r\n\r\n    export enum enColor {\r\n\r\n        //% blockId=\"OFF\" block=\"Off灭\"\r\n        OFF = 0,\r\n        //% blockId=\"Red\" block=\"Red红色\"\r\n        Red,\r\n        //% blockId=\"Green\" block=\"Greem绿色\"\r\n        Green,\r\n        //% blockId=\"Blue\" block=\"Blue蓝色\"\r\n        Blue,\r\n        //% blockId=\"White\" block=\"White白色\"\r\n        White,\r\n        //% blockId=\"Cyan\" block=\"Cyan青色\"\r\n        Cyan,\r\n        //% blockId=\"Pinkish\" block=\"Magenta品红\"\r\n        Pinkish,\r\n        //% blockId=\"Green\" block=\"Yellow黄色\"\r\n        Yellow,\r\n\r\n    }\r\n    export enum enMusic {\r\n\r\n        dadadum = 0,\r\n        entertainer,\r\n        prelude,\r\n        ode,\r\n        nyan,\r\n        ringtone,\r\n        funk,\r\n        blues,\r\n\r\n        birthday,\r\n        wedding,\r\n        funereal,\r\n        punchline,\r\n        baddy,\r\n        chase,\r\n        ba_ding,\r\n        wawawawaa,\r\n        jump_up,\r\n        jump_down,\r\n        power_up,\r\n        power_down\r\n    }\r\n    export enum enPos {\r\n\r\n        //% blockId=\"LeftState\" block=\"LeftState左边状态\"\r\n        LeftState = 1,\r\n        //% blockId=\"RightState\" block=\"RightState右边状态\"\r\n        RightState = 0\r\n    }\r\n\r\n    export enum enLineState {\r\n        //% blockId=\"White\" block=\"WhiteLine白线\"\r\n        White = 0,\r\n        //% blockId=\"Black\" block=\"BlackLine黑线\"\r\n        Black = 1\r\n\r\n    }\r\n    \r\n    export enum enAvoidState {\r\n        //% blockId=\"OBSTACLE\" block=\"Obstacle有障碍物\"\r\n        OBSTACLE = 0,\r\n        //% blockId=\"NOOBSTACLE\" block=\"NoObstacle无障碍物\"\r\n        NOOBSTACLE = 1\r\n\r\n    }\r\n\r\n    \r\n    export enum enServo {\r\n        \r\n        S1 = 1\r\n    }\r\n    export enum CarState {\r\n        //% blockId=\"Car_Run\" block=\"Forward前行\"\r\n        Car_Run = 1,\r\n        //% blockId=\"Car_Back\" block=\"Backward后退\"\r\n        Car_Back = 2,\r\n        //% blockId=\"Car_Left\" block=\"TurnLeft左转\"\r\n        Car_Left = 3,\r\n        //% blockId=\"Car_Right\" block=\"TurnRight右转\"\r\n        Car_Right = 4,\r\n        //% blockId=\"Car_Stop\" block=\"Stop停止\"\r\n        Car_Stop = 5,\r\n        //% blockId=\"Car_SpinLeft\" block=\"SpinLeft原地左旋\"\r\n        Car_SpinLeft = 6,\r\n        //% blockId=\"Car_SpinRight\" block=\"SpinRight原地右旋\"\r\n        Car_SpinRight = 7         \r\n    }\r\n    export enum AloneState {\r\n        //% blockId=\"Right_Z_Motor\" block=\"RightMotorClockwiseRotate右侧电机正转\"\r\n        Right_Z_Motor = 1,\r\n        //% blockId=\"Right_F_Motor\" block=\"RightMotorReverseRotate右侧电机反转\"\r\n        Right_F_Motor = 2,\r\n        //% blockId=\"Left_Z_Motor\" block=\"LeftMotorClockwiseRotate左侧电机正转\"\r\n        Left_Z_Motor = 3,\r\n        //% blockId=\"Left_F_Motor\" block=\"LeftMotorReverseRotate左侧电机反转\"\r\n        Left_F_Motor = 4,\r\n        //% blockId=\"Fan_Z_Motor\" block=\"FanMotorClockwiseRotate风扇电机正转\"\r\n        Fan_Z_Motor = 5,\r\n        //% blockId=\"Fan_F_Motor\" block=\"FanMotorReverseRotate风扇电机反转\"\r\n        Fan_F_Motor = 6\r\n    }\r\n\r\n    function i2cwrite(addr: number, reg: number, value: number) {\r\n        let buf = pins.createBuffer(2)\r\n        buf[0] = reg\r\n        buf[1] = value\r\n        pins.i2cWriteBuffer(addr, buf)\r\n    }\r\n\r\n    function i2ccmd(addr: number, value: number) {\r\n        let buf = pins.createBuffer(1)\r\n        buf[0] = value\r\n        pins.i2cWriteBuffer(addr, buf)\r\n    }\r\n\r\n    function i2cread(addr: number, reg: number) {\r\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\r\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\r\n        return val;\r\n    }\r\n\r\n    function initPCA9685(): void {\r\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\r\n        setFreq(50);\r\n        initialized = true\r\n    }\r\n\r\n    function setFreq(freq: number): void {\r\n        // Constrain the frequency\r\n        let prescaleval = 25000000;\r\n        prescaleval /= 4096;\r\n        prescaleval /= freq;\r\n        prescaleval -= 1;\r\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\r\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\r\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\r\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\r\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\r\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\r\n        control.waitMicros(5000);\r\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\r\n    }\r\n\r\n    function setPwm(channel: number, on: number, off: number): void {\r\n        if (channel < 0 || channel > 15)\r\n            return;\r\n        if (!initialized) {\r\n            initPCA9685();\r\n        }\r\n        let buf = pins.createBuffer(5);\r\n        buf[0] = LED0_ON_L + 4 * channel;\r\n        buf[1] = on & 0xff;\r\n        buf[2] = (on >> 8) & 0xff;\r\n        buf[3] = off & 0xff;\r\n        buf[4] = (off >> 8) & 0xff;\r\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\r\n    }\r\n\r\n\r\n    function Car_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P16, 1);\r\n       // pins.analogWritePin(AnalogPin.P1, 1023-speed); //SpeedControl速度控制\r\n\r\n       // pins.analogWritePin(AnalogPin.P0, speed);//SpeedControl速度控制\r\n       // pins.digitalWritePin(DigitalPin.P8, 0);\r\n    }\r\n   function Left_Z_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        //setPwm(15, 0, 0);\r\n        //setPwm(14, 0, 0);\r\n    }\r\n   function Left_F_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, speed);\r\n\r\n        //setPwm(15, 0, 0);\r\n        //setPwm(14, 0, 0);\r\n    }    \r\n     function Right_Z_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n       // setPwm(12, 0, 0);\r\n       // setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n    }\r\n     function Right_F_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n       // setPwm(12, 0, 0);\r\n       // setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, speed);\r\n    }  \r\n     function Fan_Z_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(4, 0, speed);\r\n        setPwm(5, 0, 0);\r\n    }\r\n      function Fan_F_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n        setPwm(4, 0, 0);\r\n        setPwm(5, 0, speed);   \r\n    }\r\n    function Car_back(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, speed);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, speed);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.analogWritePin(AnalogPin.P1, speed); //SpeedControl速度控制\r\n\r\n        //pins.analogWritePin(AnalogPin.P0, 1023 - speed);//SpeedControl速度控制\r\n        //pins.digitalWritePin(DigitalPin.P8, 1);\r\n    }\r\n\r\n    function Car_left(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n\r\n        //pins.analogWritePin(AnalogPin.P0, speed);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.digitalWritePin(DigitalPin.P1, 0);\r\n    }\r\n\r\n    function Car_right(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 1);\r\n       // pins.analogWritePin(AnalogPin.P1, 1023 - speed);\r\n    }\r\n\r\n    function Car_stop() {\r\n       \r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.digitalWritePin(DigitalPin.P1, 0);\r\n    }\r\n\r\n    function Car_spinleft(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, speed);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n\r\n        //pins.analogWritePin(AnalogPin.P0, speed);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.analogWritePin(AnalogPin.P1, speed);\r\n    } \r\n\r\n    function Car_spinright(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, speed);\r\n        //pins.analogWritePin(AnalogPin.P0, 1023-speed);\r\n        //pins.digitalWritePin(DigitalPin.P8, 1);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 1);\r\n        //pins.analogWritePin(AnalogPin.P1, 1023-speed);\r\n\r\n    }\r\n\r\n    /**\r\n     * *****************************************************************\r\n     * @param index\r\n     */\r\n    //% blockId=cbit_RGB_Car_Big2 block=\"Car小车RGBSearchLight探照灯|SelectCarLightColor选择车灯颜色 %value\"\r\n    //% weight=101\r\n    //% blockGap=10\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB_Car_Big2(value: enColor): void {\r\n\r\n        switch (value) {\r\n            case enColor.OFF: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n            case enColor.Red: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n            case enColor.Green: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n            case enColor.Blue: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.White: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.Cyan: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.Pinkish: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.Yellow: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    //% blockId=cbit_RGB_Car_Big block=\"Car小车RGBSearchLight探照灯|Red红色 %value1|Green绿色 %value2|Blue蓝色 %value3\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#C814B8\"\r\n    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB_Car_Big(value1: number, value2: number, value3: number): void {\r\n\r\n        let R = value1 * 16;\r\n        let G = value2 * 16;\r\n        let B = value3 * 16;\r\n\r\n        if (R > 4096)\r\n            R = 4095;\r\n        if (G > 4096)\r\n            G = 4095;\r\n        if (B > 4096)\r\n            B = 4095;\r\n\r\n        setPwm(0, 0, R);\r\n        setPwm(1, 0, G);\r\n        setPwm(2, 0, B);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_RGB_Car_Program block=\"RainbowChasingLight七彩流水灯\"\r\n    //% weight=99\r\n    //% blockGap=10\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB_Car_Program(): neopixel.Strip {\r\n         \r\n        if (!yahStrip) {\r\n            yahStrip = neopixel.create(DigitalPin.P16, 3, NeoPixelMode.RGB);\r\n        }\r\n        return yahStrip;  \r\n    }\r\n\r\n\r\n    //% blockId=cbit_ultrasonic_car block=\"UltrasoundReturn超声波返回(cm)\"\r\n    //% color=\"#006400\"\r\n    //% weight=98\r\n    //% blockGap=10\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Ultrasonic_Car(): number {\r\n\r\n        // send pulse\r\n        pins.setPull(DigitalPin.P14, PinPullMode.PullNone);\r\n        pins.digitalWritePin(DigitalPin.P14, 0);\r\n        control.waitMicros(2);\r\n        pins.digitalWritePin(DigitalPin.P14, 1);\r\n        control.waitMicros(10);\r\n        pins.digitalWritePin(DigitalPin.P14, 0);\r\n\r\n        // read pulse\r\n        let d = pins.pulseIn(DigitalPin.P15, PulseValue.High, 43200);\r\n        return d / 58;\r\n    }\r\n\r\n    //% blockId=cbit_Music_Car block=\"CarMusicPlay小车音乐播放|%index\"\r\n    //% weight=97\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Music_Car(index: enMusic): void {\r\n        switch (index) {\r\n            case enMusic.dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;\r\n            case enMusic.birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;\r\n            case enMusic.entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;\r\n            case enMusic.prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;\r\n            case enMusic.ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;\r\n            case enMusic.nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;\r\n            case enMusic.ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;\r\n            case enMusic.funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;\r\n            case enMusic.blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;\r\n            case enMusic.wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;\r\n            case enMusic.funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;\r\n            case enMusic.punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;\r\n            case enMusic.baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;\r\n            case enMusic.chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;\r\n            case enMusic.ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;\r\n            case enMusic.wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;\r\n            case enMusic.jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;\r\n            case enMusic.jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;\r\n            case enMusic.power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;\r\n            case enMusic.power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;\r\n        }\r\n    }\r\n    //% blockId=cbit_Servo_Car block=\"CarServo小车舵机|Number编号 %num|Angle角度 %value\"\r\n    //% weight=96\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% num.min=1 num.max=3 value.min=0 value.max=180\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=9\r\n    export function Servo_Car(num: enServo, value: number): void {\r\n\r\n        // 50hz: 20,000 us\r\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\r\n        let pwm = us * 4096 / 20000;\r\n        setPwm(num + 2, 0, pwm);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_Avoid_Sensor block=\"ObstacleSensor避障传感器|Detected检测到 %value\"\r\n    //% weight=95\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=12\r\n    export function Avoid_Sensor(value: enAvoidState): boolean {\r\n\r\n        let temp: boolean = false;\r\n        pins.digitalWritePin(DigitalPin.P9, 0);\r\n        switch (value) {\r\n            case enAvoidState.OBSTACLE: {\r\n                if (pins.analogReadPin(AnalogPin.P3) < 800) {\r\n                \r\n                    temp = true;\r\n                    setPwm(8, 0, 0);\r\n                }\r\n                else {                 \r\n                    temp = false;\r\n                    setPwm(8, 0, 4095);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case enAvoidState.NOOBSTACLE: {\r\n                if (pins.analogReadPin(AnalogPin.P3) > 800) {\r\n\r\n                    temp = true;\r\n                    setPwm(8, 0, 4095);\r\n                }\r\n                else {\r\n                    temp = false;\r\n                    setPwm(8, 0, 0);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        pins.digitalWritePin(DigitalPin.P9, 1);\r\n        return temp;\r\n\r\n    }\r\n    //% blockId=cbit_Line_Sensor block=\"RouteSensor巡线传感器|Location位置 %direct|Detected检测到 %value\"\r\n    //% weight=94\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=12\r\n    export function Line_Sensor(direct: enPos, value: enLineState): boolean {\r\n\r\n        let temp: boolean = false;\r\n\r\n        switch (direct) {\r\n            case enPos.LeftState: {\r\n                if (pins.analogReadPin(AnalogPin.P1) < 500) {\r\n                    if (value == enLineState.White) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(7, 0, 4095);\r\n                }\r\n                else {\r\n                    if (value == enLineState.Black) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(7, 0, 0);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case enPos.RightState: {\r\n                if (pins.analogReadPin(AnalogPin.P2) < 500) {\r\n                    if (value == enLineState.White) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(6, 0, 4095);\r\n                }\r\n                else {\r\n                    if (value == enLineState.Black) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(6, 0, 0);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return temp;\r\n\r\n    }\r\n    //% blockId=cbit_CarCtrl block=\"CarControl小车控制|%index\"\r\n    //% weight=93\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=10\r\n    export function CarCtrl(index: CarState): void {\r\n        switch (index) {\r\n            case CarState.Car_Run: Car_run(255); break;\r\n            case CarState.Car_Back: Car_back(255); break;\r\n            case CarState.Car_Left: Car_left(255); break;\r\n            case CarState.Car_Right: Car_right(255); break;\r\n            case CarState.Car_Stop: Car_stop(); break;\r\n            case CarState.Car_SpinLeft: Car_spinleft(255); break;\r\n            case CarState.Car_SpinRight: Car_spinright(255); break;\r\n        }\r\n    }\r\n    //% blockId=cbit_CarCtrlSpeed block=\"CarControl小车控制|%index|Speed速度 %speed\"\r\n    //% weight=92\r\n    //% blockGap=10\r\n    //% speed.min=0 speed.max=255\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=10\r\n    export function CarCtrlSpeed(index: CarState, speed: number): void {\r\n        switch (index) {\r\n            case CarState.Car_Run: Car_run(speed); break;\r\n            case CarState.Car_Back: Car_back(speed); break;\r\n            case CarState.Car_Left: Car_left(speed); break;\r\n            case CarState.Car_Right: Car_right(speed); break;\r\n            case CarState.Car_Stop: Car_stop(); break;\r\n            case CarState.Car_SpinLeft: Car_spinleft(speed); break;\r\n            case CarState.Car_SpinRight: Car_spinright(speed); break;\r\n        }\r\n    }\r\n    //% blockId=cbit_AloneCtrlSpeed block=\"SingleMotor单独电机|%index|Speed速度 %speed\"\r\n    //% weight=91\r\n    //% blockGap=10\r\n    //% speed.min=0 speed.max=255\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=10\r\n    export function AloneCtrlSpeed(index: AloneState, speed: number): void {\r\n        switch (index) {\r\n            case AloneState.Right_Z_Motor: Right_Z_run(speed); break;\r\n            case AloneState.Right_F_Motor: Right_F_run(speed); break;\r\n            case AloneState.Left_Z_Motor: Left_Z_run(speed); break;\r\n            case AloneState.Left_F_Motor: Left_F_run(speed); break;\r\n            case AloneState.Fan_Z_Motor: Fan_Z_run(speed);break;\r\n            case AloneState.Fan_F_Motor: Fan_F_run(speed);break;\r\n            \r\n        }\r\n    }    \r\n}\r\n\r\n","README.md":"","pxt.json":"{\n    \"name\": \"main\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}},{"timestamp":1746530258021,"editorVersion":"7.0.61","text":{"main.blocks":"","main.ts":"/*\r\nR\r\nmodified from liusen\r\nload dependency\r\n\"cbit\": \"file:../pxt-cbit\"\r\n*/\r\n\r\n\r\n\r\n//% color=\"#C814B8\" weight=25 icon=\"\\uf1d4\"\r\nnamespace cbit_Display显示类 {\r\n    \r\n    export enum enColor {\r\n\r\n        //% blockId=\"OFF\" block=\"Off灭\"\r\n        OFF = 0,\r\n        //% blockId=\"Red\" block=\"Red红色\"\r\n        Red,\r\n        //% blockId=\"Green\" block=\"Green绿色\"\r\n        Green,\r\n        //% blockId=\"Blue\" block=\"Blue蓝色\"\r\n        Blue,\r\n        //% blockId=\"White\" block=\"White白色\"\r\n        White,\r\n        //% blockId=\"Cyan\" block=\"Cyan青色\"\r\n        Cyan,\r\n        //% blockId=\"Pinkish\" block=\"Magenta品红\"\r\n        Pinkish,\r\n        //% blockId=\"Green\" block=\"Yellow黄色\"\r\n        Yellow,\r\n\r\n    }\r\n    export enum enLED1 {\r\n        \r\n        //% blockId=\"OFF\" block=\"Off灭\"\r\n        OFF = 0,\r\n        //% blockId=\"ON\" block=\"On亮\"\r\n        ON =1\r\n    }\r\n\r\n    //% blockId=cbit_LED1 block=\"LEDLight灯|Pin引脚 %pin|Status状态 %value\"\r\n    //% weight=5\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=1\r\n    export function LED1(pin: DigitalPin, value: enLED1): void {\r\n\r\n        pins.digitalWritePin(pin, value);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_LED2 block=\"LEDLight灯|Pin引脚 %pin|Brightness亮度 %value\"\r\n    //% weight=4\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% value.min=0 value.max=255\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=2\r\n    export function LED2(pin: AnalogPin, value: number): void {\r\n\r\n        pins.analogWritePin(pin, value * 1024 / 256);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_BreathLED block=\"BreathLight呼吸灯|Pin引脚 %pin\"\r\n    //% weight=3\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=3\r\n    export function BreathLED(pin: AnalogPin): void {\r\n\r\n        for (let i: number = 0; i < 1023; i++) {\r\n            pins.analogWritePin(pin, i);\r\n            //basic.pause(1);\r\n            control.waitMicros(1000);\r\n        }\r\n        basic.pause(10);\r\n        for (let i: number = 1023; i > 0; i--) {\r\n            pins.analogWritePin(pin, i);\r\n            //basic.pause(1);\r\n            control.waitMicros(1000);\r\n        }\r\n\r\n    }\r\n\r\n    //% blockId=cbit_RGB block=\"RGBRainbow七彩灯|Pin引脚R %pin1|Pin引脚G %pin2|Pin引脚B %pin3|Red红色 %value1|Green绿色 %value2|Blue蓝色 %value3\"\r\n    //% weight=2\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB(pin1: AnalogPin, pin2: AnalogPin, pin3: AnalogPin, value1: number, value2: number, value3: number): void {\r\n\r\n        pins.analogWritePin(pin1, value1 * 1024 / 256);\r\n        pins.analogWritePin(pin2, value2 * 1024 / 256);\r\n        pins.analogWritePin(pin3, value3 * 1024 / 256);\r\n\r\n    }\r\n    //% blockId=cbit_RGB2 block=\"RGBRainbow七彩灯|Pin引脚R %pin1|Pin引脚G %pin2|Pin引脚B %pin3|Display显示 %value\"\r\n    //% weight=1\r\n    //% blockGap=8\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB2(pin1: DigitalPin, pin2: DigitalPin, pin3: DigitalPin, value: enColor): void {\r\n\r\n        switch (value) {\r\n            case enColor.OFF: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n            case enColor.Red: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n            case enColor.Green: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n            case enColor.Blue: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.White: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.Cyan: {\r\n                pins.digitalWritePin(pin1, 0);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.Pinkish: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 0);\r\n                pins.digitalWritePin(pin3, 1);\r\n                break;\r\n            }\r\n            case enColor.Yellow: {\r\n                pins.digitalWritePin(pin1, 1);\r\n                pins.digitalWritePin(pin2, 1);\r\n                pins.digitalWritePin(pin3, 0);\r\n                break;\r\n            }\r\n        }\r\n\r\n    }\r\n   \r\n}\r\n/*****************************************************************************************************************************************\r\n *  Sensor传感器类 ***************************************************************************************************************************** \r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#87CEEB\" weight=24 icon=\"\\uf1b6\"\r\nnamespace cbit_Sensor传感器类 {\r\n\r\n    export enum enVoice {\r\n        //% blockId=\"Voice\" block=\"Sound有声音\"\r\n        Voice = 0,\r\n        //% blockId=\"NoVoice\" block=\"Silent无声音\"\r\n        NoVoice = 1\r\n    }\r\n\r\n    export enum enIR {\r\n        //% blockId=\"Get\" block=\"Detected检测到\"\r\n        Get = 0,\r\n        //% blockId=\"NoVoice\" block=\"Undetected未检测\"\r\n        NoGet = 1\r\n    }\r\n    \r\n\r\n    //% blockId=cbit_Voice_Sensor block=\"SoundSensor声音传感器|Pin引脚 %pin|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#87CEEB\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Voice_Sensor(pin: DigitalPin, value: enVoice): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    function IR_send_38k() {\r\n        for (let i: number = 0; i < 8; i++) {\r\n            pins.digitalWritePin(DigitalPin.P9, 1);\r\n            control.waitMicros(13);\r\n            pins.digitalWritePin(DigitalPin.P9, 0);\r\n            control.waitMicros(13);\r\n        }\r\n    }\r\n    //% blockId=cbit_IR_Sensor block=\"InfraredSensor红外传感器|Pin引脚 %pin|  |%value|Obstacle障碍物\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#87CEEB\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function IR_Sensor(pin: DigitalPin, value: enIR): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        //IR_send_38k();\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n\r\n    //% blockId=cbit_IR_Send block=\"InfraredTransmit红外发射|Pin引脚 %pin\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#87CEEB\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function IR_Send(pin: DigitalPin): void {\r\n\r\n        \r\n        IR_send_38k();\r\n\r\n    }\r\n   \r\n    //% blockId=cbit_ultrasonic block=\"Ultrasound超声波|TransmitPin发射管脚 %Trig|ReceivePin接收管脚 %Echo\"\r\n    //% color=\"#87CEEB\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Ultrasonic(Trig: DigitalPin, Echo: DigitalPin): number {\r\n\r\n        // send pulse\r\n        pins.setPull(Trig, PinPullMode.PullNone);\r\n        pins.digitalWritePin(Trig, 0);\r\n        control.waitMicros(2);\r\n        pins.digitalWritePin(Trig, 1);\r\n        control.waitMicros(10);\r\n        pins.digitalWritePin(Trig, 0);\r\n\r\n        // read pulse\r\n        let d = pins.pulseIn(Echo, PulseValue.High, 23200);\r\n        return d / 58;\r\n    }\r\n}\r\n\r\n/*****************************************************************************************************************************************\r\n *  Input输入类 *****************************************************************************************************************************\r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#808080\" weight=23 icon=\"\\uf11c\"\r\nnamespace cbit_Input输入类 {\r\n\r\n    export enum enRocker {\r\n        //% blockId=\"Nostate\" block=\"无\"\r\n        Nostate = 0,\r\n        //% blockId=\"Up\" block=\"上\"\r\n        Up,\r\n        //% blockId=\"Down\" block=\"下\"\r\n        Down,\r\n        //% blockId=\"Left\" block=\"左\"\r\n        Left,\r\n        //% blockId=\"Right\" block=\"右\"\r\n        Right,\r\n        //% blockId=\"Press\" block=\"按下\"\r\n        Press\r\n    }\r\n\r\n    export enum enTouch {\r\n        //% blockId=\"NoTouch\" block=\"Untouched未触摸\"\r\n        NoTouch = 0,\r\n        //% blockId=\"Touch\" block=\"Touched触摸\"\r\n        Touch = 1\r\n    }\r\n    export enum enButton {\r\n        //% blockId=\"Press\" block=\"Press按下\"\r\n        Press = 0,\r\n        //% blockId=\"Realse\" block=\"Release松开\"\r\n        Realse = 1\r\n    }\r\n\r\n    //% blockId=cbit_TouchPad block=\"TouchSwitch触摸开关|Pin引脚 %pin|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#808080\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\r\n    export function TouchPad(pin: DigitalPin, value: enTouch): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n    //% blockId=cbit_Rocker block=\"Joystick遥杆|VRX %pin1|VRY %pin2|SW %pin3|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#808080\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=6\r\n    export function Rocker(pin1: AnalogPin, pin2: AnalogPin, pin3: AnalogPin, value: enRocker): boolean {\r\n\r\n        //pins.setPull(pin3, PinPullMode.PullUp);\r\n        let x = pins.analogReadPin(pin1);\r\n        let y = pins.analogReadPin(pin2);\r\n        let z = pins.analogReadPin(pin3);\r\n        let now_state = enRocker.Nostate;\r\n\r\n        if (x <= 20) // Up上\r\n        {\r\n\r\n            now_state = enRocker.Up;\r\n\r\n        }\r\n        if (x >= 1000) //\r\n        {\r\n\r\n            now_state = enRocker.Down;\r\n        }\r\n        if (y <= 50) //Right右\r\n        {\r\n            now_state = enRocker.Right;\r\n        }\r\n        if (y >= 1000) //Left左\r\n        {\r\n            now_state = enRocker.Left;\r\n        }\r\n        if (z <= 20)\r\n            now_state = enRocker.Press;\r\n        \r\n        if (now_state == value)\r\n            return true;\r\n        else\r\n            return false;\r\n\r\n    }\r\n\r\n    //% blockId=cbit_Button block=\"PressButton按键|Pin引脚 %pin|Return返回 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#808080\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=5\r\n    export function Button(pin: DigitalPin, value: enButton): boolean {\r\n\r\n        pins.setPull(pin, PinPullMode.PullUp);\r\n        if (pins.digitalReadPin(pin) == value) {\r\n            return true;\r\n        }\r\n        else {\r\n            return false;\r\n        }\r\n\r\n    }  \r\n}\r\n\r\n/*****************************************************************************************************************************************\r\n *    Music音乐类 *****************************************************************************************************************************\r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#D2691E\" weight=22 icon=\"\\uf001\"\r\nnamespace cbit_Music音乐类 {\r\n    export enum enBuzzer {\r\n\r\n        //% blockId=\"NoBeep\" block=\"Beep响\"\r\n        NoBeep = 0,\r\n        //% blockId=\"Beep\" block=\"NotBeep不响\"\r\n        Beep\r\n    }\r\n\r\n    //% blockId=cbit_Buzzer block=\"ActiveBuzzer有源蜂鸣器|Pin引脚 %pin|值 %value\"\r\n    //% weight=100\r\n    //% blockGap=10 \r\n    //% color=\"#D2691E\"\r\n    //% value.min=0 value.max=1\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=8\r\n    export function Buzzer(pin: DigitalPin, value: enBuzzer): void {\r\n\r\n        pins.setPull(pin, PinPullMode.PullNone);\r\n        pins.digitalWritePin(pin, value);\r\n\r\n    }\r\n\r\n}\r\n\r\n/*****************************************************************************************************************************************\r\n *    Motor电机类 *****************************************************************************************************************************\r\n ****************************************************************************************************************************************/\r\n\r\n//% color=\"#0000CD\" weight=21 icon=\"\\uf185\"\r\nnamespace cbit_Motor电机类 {\r\n\r\n    //% blockId=cbit_Fan block=\"Fan风扇|Pin引脚 %pin|Speed速度 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#0000CD\"\r\n    //% value.min=0 value.max=1023\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=9\r\n    export function Fan(pin: AnalogPin, value: number): void {\r\n\r\n        pins.analogWritePin(pin, value);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_Servo block=\"Servo舵机|Pin引脚 %pin|Angle角度 %value\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#0000CD\"\r\n    //% value.min=0 value.max=180\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=9\r\n    export function Servo(pin: AnalogPin, value: number): void {\r\n\r\n        pins.servoWritePin(pin, value);\r\n\r\n    }\r\n\r\n}\r\n\r\n//% color=\"#006400\" weight=20 icon=\"\\uf1b9\"\r\nnamespace cbit_Car小车类 {\r\n\r\n    const PCA9685_ADD = 0x41\r\n    const MODE1 = 0x00\r\n    const MODE2 = 0x01\r\n    const SUBADR1 = 0x02\r\n    const SUBADR2 = 0x03\r\n    const SUBADR3 = 0x04\r\n\r\n    const LED0_ON_L = 0x06\r\n    const LED0_ON_H = 0x07\r\n    const LED0_OFF_L = 0x08\r\n    const LED0_OFF_H = 0x09\r\n\r\n    const ALL_LED_ON_L = 0xFA\r\n    const ALL_LED_ON_H = 0xFB\r\n    const ALL_LED_OFF_L = 0xFC\r\n    const ALL_LED_OFF_H = 0xFD\r\n\r\n    const PRESCALE = 0xFE\r\n\r\n    let initialized = false\r\n    let yahStrip: neopixel.Strip;\r\n\r\n    export enum enColor {\r\n\r\n        //% blockId=\"OFF\" block=\"Off灭\"\r\n        OFF = 0,\r\n        //% blockId=\"Red\" block=\"Red红色\"\r\n        Red,\r\n        //% blockId=\"Green\" block=\"Greem绿色\"\r\n        Green,\r\n        //% blockId=\"Blue\" block=\"Blue蓝色\"\r\n        Blue,\r\n        //% blockId=\"White\" block=\"White白色\"\r\n        White,\r\n        //% blockId=\"Cyan\" block=\"Cyan青色\"\r\n        Cyan,\r\n        //% blockId=\"Pinkish\" block=\"Magenta品红\"\r\n        Pinkish,\r\n        //% blockId=\"Green\" block=\"Yellow黄色\"\r\n        Yellow,\r\n\r\n    }\r\n    export enum enMusic {\r\n\r\n        dadadum = 0,\r\n        entertainer,\r\n        prelude,\r\n        ode,\r\n        nyan,\r\n        ringtone,\r\n        funk,\r\n        blues,\r\n\r\n        birthday,\r\n        wedding,\r\n        funereal,\r\n        punchline,\r\n        baddy,\r\n        chase,\r\n        ba_ding,\r\n        wawawawaa,\r\n        jump_up,\r\n        jump_down,\r\n        power_up,\r\n        power_down\r\n    }\r\n    export enum enPos {\r\n\r\n        //% blockId=\"LeftState\" block=\"LeftState左边状态\"\r\n        LeftState = 1,\r\n        //% blockId=\"RightState\" block=\"RightState右边状态\"\r\n        RightState = 0\r\n    }\r\n\r\n    export enum enLineState {\r\n        //% blockId=\"White\" block=\"WhiteLine白线\"\r\n        White = 0,\r\n        //% blockId=\"Black\" block=\"BlackLine黑线\"\r\n        Black = 1\r\n\r\n    }\r\n    \r\n    export enum enAvoidState {\r\n        //% blockId=\"OBSTACLE\" block=\"Obstacle有障碍物\"\r\n        OBSTACLE = 0,\r\n        //% blockId=\"NOOBSTACLE\" block=\"NoObstacle无障碍物\"\r\n        NOOBSTACLE = 1\r\n\r\n    }\r\n\r\n    \r\n    export enum enServo {\r\n        \r\n        S1 = 1\r\n    }\r\n    export enum CarState {\r\n        //% blockId=\"Car_Run\" block=\"Forward前行\"\r\n        Car_Run = 1,\r\n        //% blockId=\"Car_Back\" block=\"Backward后退\"\r\n        Car_Back = 2,\r\n        //% blockId=\"Car_Left\" block=\"TurnLeft左转\"\r\n        Car_Left = 3,\r\n        //% blockId=\"Car_Right\" block=\"TurnRight右转\"\r\n        Car_Right = 4,\r\n        //% blockId=\"Car_Stop\" block=\"Stop停止\"\r\n        Car_Stop = 5,\r\n        //% blockId=\"Car_SpinLeft\" block=\"SpinLeft原地左旋\"\r\n        Car_SpinLeft = 6,\r\n        //% blockId=\"Car_SpinRight\" block=\"SpinRight原地右旋\"\r\n        Car_SpinRight = 7         \r\n    }\r\n    export enum AloneState {\r\n        //% blockId=\"Right_Z_Motor\" block=\"RightMotorClockwiseRotate右侧电机正转\"\r\n        Right_Z_Motor = 1,\r\n        //% blockId=\"Right_F_Motor\" block=\"RightMotorReverseRotate右侧电机反转\"\r\n        Right_F_Motor = 2,\r\n        //% blockId=\"Left_Z_Motor\" block=\"LeftMotorClockwiseRotate左侧电机正转\"\r\n        Left_Z_Motor = 3,\r\n        //% blockId=\"Left_F_Motor\" block=\"LeftMotorReverseRotate左侧电机反转\"\r\n        Left_F_Motor = 4,\r\n        //% blockId=\"Fan_Z_Motor\" block=\"FanMotorClockwiseRotate风扇电机正转\"\r\n        Fan_Z_Motor = 5,\r\n        //% blockId=\"Fan_F_Motor\" block=\"FanMotorReverseRotate风扇电机反转\"\r\n        Fan_F_Motor = 6\r\n    }\r\n\r\n    function i2cwrite(addr: number, reg: number, value: number) {\r\n        let buf = pins.createBuffer(2)\r\n        buf[0] = reg\r\n        buf[1] = value\r\n        pins.i2cWriteBuffer(addr, buf)\r\n    }\r\n\r\n    function i2ccmd(addr: number, value: number) {\r\n        let buf = pins.createBuffer(1)\r\n        buf[0] = value\r\n        pins.i2cWriteBuffer(addr, buf)\r\n    }\r\n\r\n    function i2cread(addr: number, reg: number) {\r\n        pins.i2cWriteNumber(addr, reg, NumberFormat.UInt8BE);\r\n        let val = pins.i2cReadNumber(addr, NumberFormat.UInt8BE);\r\n        return val;\r\n    }\r\n\r\n    function initPCA9685(): void {\r\n        i2cwrite(PCA9685_ADD, MODE1, 0x00)\r\n        setFreq(50);\r\n        initialized = true\r\n    }\r\n\r\n    function setFreq(freq: number): void {\r\n        // Constrain the frequency\r\n        let prescaleval = 25000000;\r\n        prescaleval /= 4096;\r\n        prescaleval /= freq;\r\n        prescaleval -= 1;\r\n        let prescale = prescaleval; //Math.Floor(prescaleval + 0.5);\r\n        let oldmode = i2cread(PCA9685_ADD, MODE1);\r\n        let newmode = (oldmode & 0x7F) | 0x10; // sleep\r\n        i2cwrite(PCA9685_ADD, MODE1, newmode); // go to sleep\r\n        i2cwrite(PCA9685_ADD, PRESCALE, prescale); // set the prescaler\r\n        i2cwrite(PCA9685_ADD, MODE1, oldmode);\r\n        control.waitMicros(5000);\r\n        i2cwrite(PCA9685_ADD, MODE1, oldmode | 0xa1);\r\n    }\r\n\r\n    function setPwm(channel: number, on: number, off: number): void {\r\n        if (channel < 0 || channel > 15)\r\n            return;\r\n        if (!initialized) {\r\n            initPCA9685();\r\n        }\r\n        let buf = pins.createBuffer(5);\r\n        buf[0] = LED0_ON_L + 4 * channel;\r\n        buf[1] = on & 0xff;\r\n        buf[2] = (on >> 8) & 0xff;\r\n        buf[3] = off & 0xff;\r\n        buf[4] = (off >> 8) & 0xff;\r\n        pins.i2cWriteBuffer(PCA9685_ADD, buf);\r\n    }\r\n\r\n\r\n    function Car_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P16, 1);\r\n       // pins.analogWritePin(AnalogPin.P1, 1023-speed); //SpeedControl速度控制\r\n\r\n       // pins.analogWritePin(AnalogPin.P0, speed);//SpeedControl速度控制\r\n       // pins.digitalWritePin(DigitalPin.P8, 0);\r\n    }\r\n   function Left_Z_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        //setPwm(15, 0, 0);\r\n        //setPwm(14, 0, 0);\r\n    }\r\n   function Left_F_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, speed);\r\n\r\n        //setPwm(15, 0, 0);\r\n        //setPwm(14, 0, 0);\r\n    }    \r\n     function Right_Z_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n       // setPwm(12, 0, 0);\r\n       // setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n    }\r\n     function Right_F_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n       // setPwm(12, 0, 0);\r\n       // setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, speed);\r\n    }  \r\n     function Fan_Z_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(4, 0, speed);\r\n        setPwm(5, 0, 0);\r\n    }\r\n      function Fan_F_run(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350) {\r\n            speed = 350\r\n        }\r\n        setPwm(4, 0, 0);\r\n        setPwm(5, 0, speed);   \r\n    }\r\n    function Car_back(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, speed);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, speed);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.analogWritePin(AnalogPin.P1, speed); //SpeedControl速度控制\r\n\r\n        //pins.analogWritePin(AnalogPin.P0, 1023 - speed);//SpeedControl速度控制\r\n        //pins.digitalWritePin(DigitalPin.P8, 1);\r\n    }\r\n\r\n    function Car_left(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n\r\n        //pins.analogWritePin(AnalogPin.P0, speed);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.digitalWritePin(DigitalPin.P1, 0);\r\n    }\r\n\r\n    function Car_right(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 1);\r\n       // pins.analogWritePin(AnalogPin.P1, 1023 - speed);\r\n    }\r\n\r\n    function Car_stop() {\r\n       \r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P0, 0);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.digitalWritePin(DigitalPin.P1, 0);\r\n    }\r\n\r\n    function Car_spinleft(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, 0);\r\n        setPwm(13, 0, speed);\r\n\r\n        setPwm(15, 0, speed);\r\n        setPwm(14, 0, 0);\r\n\r\n        //pins.analogWritePin(AnalogPin.P0, speed);\r\n        //pins.digitalWritePin(DigitalPin.P8, 0);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 0);\r\n        //pins.analogWritePin(AnalogPin.P1, speed);\r\n    } \r\n\r\n    function Car_spinright(speed: number) {\r\n\r\n        speed = speed * 16; // map 350 to 4096\r\n        if (speed >= 4096) {\r\n            speed = 4095\r\n        }\r\n        if (speed <= 350 && speed != 0) {\r\n            speed = 350\r\n        }\r\n        setPwm(12, 0, speed);\r\n        setPwm(13, 0, 0);\r\n\r\n        setPwm(15, 0, 0);\r\n        setPwm(14, 0, speed);\r\n        //pins.analogWritePin(AnalogPin.P0, 1023-speed);\r\n        //pins.digitalWritePin(DigitalPin.P8, 1);\r\n\r\n        //pins.digitalWritePin(DigitalPin.P16, 1);\r\n        //pins.analogWritePin(AnalogPin.P1, 1023-speed);\r\n\r\n    }\r\n\r\n    /**\r\n     * *****************************************************************\r\n     * @param index\r\n     */\r\n    //% blockId=cbit_RGB_Car_Big2 block=\"Car小车RGBSearchLight探照灯|SelectCarLightColor选择车灯颜色 %value\"\r\n    //% weight=101\r\n    //% blockGap=10\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB_Car_Big2(value: enColor): void {\r\n\r\n        switch (value) {\r\n            case enColor.OFF: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n            case enColor.Red: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n            case enColor.Green: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n            case enColor.Blue: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.White: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.Cyan: {\r\n                setPwm(0, 0, 0);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.Pinkish: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 0);\r\n                setPwm(2, 0, 4095);\r\n                break;\r\n            }\r\n            case enColor.Yellow: {\r\n                setPwm(0, 0, 4095);\r\n                setPwm(1, 0, 4095);\r\n                setPwm(2, 0, 0);\r\n                break;\r\n            }\r\n        }\r\n    }\r\n    //% blockId=cbit_RGB_Car_Big block=\"Car小车RGBSearchLight探照灯|Red红色 %value1|Green绿色 %value2|Blue蓝色 %value3\"\r\n    //% weight=100\r\n    //% blockGap=10\r\n    //% color=\"#C814B8\"\r\n    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB_Car_Big(value1: number, value2: number, value3: number): void {\r\n\r\n        let R = value1 * 16;\r\n        let G = value2 * 16;\r\n        let B = value3 * 16;\r\n\r\n        if (R > 4096)\r\n            R = 4095;\r\n        if (G > 4096)\r\n            G = 4095;\r\n        if (B > 4096)\r\n            B = 4095;\r\n\r\n        setPwm(0, 0, R);\r\n        setPwm(1, 0, G);\r\n        setPwm(2, 0, B);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_RGB_Car_Program block=\"RainbowChasingLight七彩流水灯\"\r\n    //% weight=99\r\n    //% blockGap=10\r\n    //% color=\"#C814B8\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function RGB_Car_Program(): neopixel.Strip {\r\n         \r\n        if (!yahStrip) {\r\n            yahStrip = neopixel.create(DigitalPin.P16, 3, NeoPixelMode.RGB);\r\n        }\r\n        return yahStrip;  \r\n    }\r\n\r\n\r\n    //% blockId=cbit_ultrasonic_car block=\"UltrasoundReturn超声波返回(cm)\"\r\n    //% color=\"#006400\"\r\n    //% weight=98\r\n    //% blockGap=10\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Ultrasonic_Car(): number {\r\n\r\n        // send pulse\r\n        pins.setPull(DigitalPin.P14, PinPullMode.PullNone);\r\n        pins.digitalWritePin(DigitalPin.P14, 0);\r\n        control.waitMicros(2);\r\n        pins.digitalWritePin(DigitalPin.P14, 1);\r\n        control.waitMicros(10);\r\n        pins.digitalWritePin(DigitalPin.P14, 0);\r\n\r\n        // read pulse\r\n        let d = pins.pulseIn(DigitalPin.P15, PulseValue.High, 43200);\r\n        return d / 58;\r\n    }\r\n\r\n    //% blockId=cbit_Music_Car block=\"CarMusicPlay小车音乐播放|%index\"\r\n    //% weight=97\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=4\r\n    export function Music_Car(index: enMusic): void {\r\n        switch (index) {\r\n            case enMusic.dadadum: music.beginMelody(music.builtInMelody(Melodies.Dadadadum), MelodyOptions.Once); break;\r\n            case enMusic.birthday: music.beginMelody(music.builtInMelody(Melodies.Birthday), MelodyOptions.Once); break;\r\n            case enMusic.entertainer: music.beginMelody(music.builtInMelody(Melodies.Entertainer), MelodyOptions.Once); break;\r\n            case enMusic.prelude: music.beginMelody(music.builtInMelody(Melodies.Prelude), MelodyOptions.Once); break;\r\n            case enMusic.ode: music.beginMelody(music.builtInMelody(Melodies.Ode), MelodyOptions.Once); break;\r\n            case enMusic.nyan: music.beginMelody(music.builtInMelody(Melodies.Nyan), MelodyOptions.Once); break;\r\n            case enMusic.ringtone: music.beginMelody(music.builtInMelody(Melodies.Ringtone), MelodyOptions.Once); break;\r\n            case enMusic.funk: music.beginMelody(music.builtInMelody(Melodies.Funk), MelodyOptions.Once); break;\r\n            case enMusic.blues: music.beginMelody(music.builtInMelody(Melodies.Blues), MelodyOptions.Once); break;\r\n            case enMusic.wedding: music.beginMelody(music.builtInMelody(Melodies.Wedding), MelodyOptions.Once); break;\r\n            case enMusic.funereal: music.beginMelody(music.builtInMelody(Melodies.Funeral), MelodyOptions.Once); break;\r\n            case enMusic.punchline: music.beginMelody(music.builtInMelody(Melodies.Punchline), MelodyOptions.Once); break;\r\n            case enMusic.baddy: music.beginMelody(music.builtInMelody(Melodies.Baddy), MelodyOptions.Once); break;\r\n            case enMusic.chase: music.beginMelody(music.builtInMelody(Melodies.Chase), MelodyOptions.Once); break;\r\n            case enMusic.ba_ding: music.beginMelody(music.builtInMelody(Melodies.BaDing), MelodyOptions.Once); break;\r\n            case enMusic.wawawawaa: music.beginMelody(music.builtInMelody(Melodies.Wawawawaa), MelodyOptions.Once); break;\r\n            case enMusic.jump_up: music.beginMelody(music.builtInMelody(Melodies.JumpUp), MelodyOptions.Once); break;\r\n            case enMusic.jump_down: music.beginMelody(music.builtInMelody(Melodies.JumpDown), MelodyOptions.Once); break;\r\n            case enMusic.power_up: music.beginMelody(music.builtInMelody(Melodies.PowerUp), MelodyOptions.Once); break;\r\n            case enMusic.power_down: music.beginMelody(music.builtInMelody(Melodies.PowerDown), MelodyOptions.Once); break;\r\n        }\r\n    }\r\n    //% blockId=cbit_Servo_Car block=\"CarServo小车舵机|Number编号 %num|Angle角度 %value\"\r\n    //% weight=96\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% num.min=1 num.max=3 value.min=0 value.max=180\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=9\r\n    export function Servo_Car(num: enServo, value: number): void {\r\n\r\n        // 50hz: 20,000 us\r\n        let us = (value * 1800 / 180 + 600); // 0.6 ~ 2.4\r\n        let pwm = us * 4096 / 20000;\r\n        setPwm(num + 2, 0, pwm);\r\n\r\n    }\r\n\r\n    //% blockId=cbit_Avoid_Sensor block=\"ObstacleSensor避障传感器|Detected检测到 %value\"\r\n    //% weight=95\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=12\r\n    export function Avoid_Sensor(value: enAvoidState): boolean {\r\n\r\n        let temp: boolean = false;\r\n        pins.digitalWritePin(DigitalPin.P9, 0);\r\n        switch (value) {\r\n            case enAvoidState.OBSTACLE: {\r\n                if (pins.analogReadPin(AnalogPin.P3) < 800) {\r\n                \r\n                    temp = true;\r\n                    setPwm(8, 0, 0);\r\n                }\r\n                else {                 \r\n                    temp = false;\r\n                    setPwm(8, 0, 4095);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case enAvoidState.NOOBSTACLE: {\r\n                if (pins.analogReadPin(AnalogPin.P3) > 800) {\r\n\r\n                    temp = true;\r\n                    setPwm(8, 0, 4095);\r\n                }\r\n                else {\r\n                    temp = false;\r\n                    setPwm(8, 0, 0);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        pins.digitalWritePin(DigitalPin.P9, 1);\r\n        return temp;\r\n\r\n    }\r\n    //% blockId=cbit_Line_Sensor block=\"RouteSensor巡线传感器|Location位置 %direct|Detected检测到 %value\"\r\n    //% weight=94\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=12\r\n    export function Line_Sensor(direct: enPos, value: enLineState): boolean {\r\n\r\n        let temp: boolean = false;\r\n\r\n        switch (direct) {\r\n            case enPos.LeftState: {\r\n                if (pins.analogReadPin(AnalogPin.P1) < 500) {\r\n                    if (value == enLineState.White) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(7, 0, 4095);\r\n                }\r\n                else {\r\n                    if (value == enLineState.Black) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(7, 0, 0);\r\n                }\r\n                break;\r\n            }\r\n\r\n            case enPos.RightState: {\r\n                if (pins.analogReadPin(AnalogPin.P2) < 500) {\r\n                    if (value == enLineState.White) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(6, 0, 4095);\r\n                }\r\n                else {\r\n                    if (value == enLineState.Black) {\r\n                        temp = true;\r\n                    }\r\n                    setPwm(6, 0, 0);\r\n                }\r\n                break;\r\n            }\r\n        }\r\n        return temp;\r\n\r\n    }\r\n    //% blockId=cbit_CarCtrl block=\"CarControl小车控制|%index\"\r\n    //% weight=93\r\n    //% blockGap=10\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=10\r\n    export function CarCtrl(index: CarState): void {\r\n        switch (index) {\r\n            case CarState.Car_Run: Car_run(255); break;\r\n            case CarState.Car_Back: Car_back(255); break;\r\n            case CarState.Car_Left: Car_left(255); break;\r\n            case CarState.Car_Right: Car_right(255); break;\r\n            case CarState.Car_Stop: Car_stop(); break;\r\n            case CarState.Car_SpinLeft: Car_spinleft(255); break;\r\n            case CarState.Car_SpinRight: Car_spinright(255); break;\r\n        }\r\n    }\r\n    //% blockId=cbit_CarCtrlSpeed block=\"CarControl小车控制|%index|Speed速度 %speed\"\r\n    //% weight=92\r\n    //% blockGap=10\r\n    //% speed.min=0 speed.max=255\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=10\r\n    export function CarCtrlSpeed(index: CarState, speed: number): void {\r\n        switch (index) {\r\n            case CarState.Car_Run: Car_run(speed); break;\r\n            case CarState.Car_Back: Car_back(speed); break;\r\n            case CarState.Car_Left: Car_left(speed); break;\r\n            case CarState.Car_Right: Car_right(speed); break;\r\n            case CarState.Car_Stop: Car_stop(); break;\r\n            case CarState.Car_SpinLeft: Car_spinleft(speed); break;\r\n            case CarState.Car_SpinRight: Car_spinright(speed); break;\r\n        }\r\n    }\r\n    //% blockId=cbit_AloneCtrlSpeed block=\"SingleMotor单独电机|%index|Speed速度 %speed\"\r\n    //% weight=91\r\n    //% blockGap=10\r\n    //% speed.min=0 speed.max=255\r\n    //% color=\"#006400\"\r\n    //% name.fieldEditor=\"gridpicker\" name.fieldOptions.columns=10\r\n    export function AloneCtrlSpeed(index: AloneState, speed: number): void {\r\n        switch (index) {\r\n            case AloneState.Right_Z_Motor: Right_Z_run(speed); break;\r\n            case AloneState.Right_F_Motor: Right_F_run(speed); break;\r\n            case AloneState.Left_Z_Motor: Left_Z_run(speed); break;\r\n            case AloneState.Left_F_Motor: Left_F_run(speed); break;\r\n            case AloneState.Fan_Z_Motor: Fan_Z_run(speed);break;\r\n            case AloneState.Fan_F_Motor: Fan_F_run(speed);break;\r\n            \r\n        }\r\n    }    \r\n}\r\n\r\n","README.md":"","pxt.json":"{\n    \"name\": \"main\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ]\n}\n"}}],"shares":[],"lastSaveTime":1746530258188}